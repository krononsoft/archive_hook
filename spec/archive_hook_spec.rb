require "spec_helper"
require "active_record"

RSpec.describe ArchiveHook do
  it "has a version number" do
    expect(ArchiveHook::VERSION).not_to be nil
  end

  class Board < ActiveRecord::Base
  end

  class Card < ActiveRecord::Base
    belongs_to :board
  end

  class Tag < ActiveRecord::Base
    belongs_to :card
  end

  describe ".archive" do
    let(:database) { 'archive_hook_test' }

    before(:each) do
      Kernel.system("createdb", database)
      ActiveRecord::Base.establish_connection(adapter: "postgresql", database: database)
      ActiveRecord::Base.connection.execute <<-SQL
        create table boards (
          id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
          title varchar,
          created_at timestamp
        );
        create table cards (
          id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
          title varchar, 
          board_id integer,
          created_at timestamp,
          foreign key (board_id) REFERENCES boards
        );
        create table tags (
          id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
          title varchar, 
          card_id integer,
          created_at timestamp,
          foreign key (card_id) REFERENCES cards
        );
        create table boards_archive (like boards);
        create table cards_archive (like cards);
        create table tags_archive (like tags);
      SQL

      board = Board.create(title: "Current issues")
      card = Card.create(title: "Create game", board: board)
      Tag.create(title: "r1", card: card)
    end

    after(:each) do
      ActiveRecord::Base.connection.disconnect!
      Kernel.system('dropdb', database)
    end

    subject { described_class.archive(Board, 1.day.ago, { Board => [Card], Card => [Tag] } ) }

    context "when everything is actual" do
      it "doesn't clear" do
        expect { subject }.to not_change { Board.count }.from(1)
      end
    end

    context "when there is something outdated" do
      let!(:outdated_card) { Card.create(title: "Archive card", created_at: 2.days.ago) }
      let!(:outdated_tag) { Tag.create(title: "r2", created_at: 2.days.ago) }
      let!(:outdated_board) { Board.create(title: "Archive board", created_at: 2.days.ago) }
      let!(:related_tag) { Tag.create(title: "critical", card: related_card) }
      let!(:related_card) { Card.create(title: "Actual card", board: outdated_board) }

      it "clears them" do
        expect { subject }.to change { Board.count }.from(2).to(1)
                          .and change { Card.count }.by(-2)
                          .and change { Card.from("cards_archive").count}.by(2)
                          .and change { Tag.count }.by(-2)
                          .and change { Tag.from("tags_archive").count}.by(2)
      end
    end
  end
end
